lm_views <- lm(views ~ ., data = X)
funny <- ted$Funny
confusing <- ted$Confusing
inspiring <- ted$Inspiring
lm_funny <- lm(funny ~ . , data = X)
lm_confusing <- lm(confusing ~ ., data = X)
lm_inspiring <- lm(inspiring ~ . , data = X)
top_predictors_by_p(lm_views)
top_predictors_by_p(lm_inspiring)
top_predictors_by_p(lm_confusing)
top_predictors_by_p <- function(model) {
X <- as.data.frame(summary(model)$coefficients)
# order by p-values
X <- X[order(X["Pr(>|t|)"]), ]
X[1:6, c("Estimate", "Pr(>|t|)")]
}
top_predictors_by_p(lm_views)
top_predictors_by_p(lm_views)
top_predictors_by_p(lm_inspiring)
top_predictors_by_p(lm_confusing)
top_predictors_by_p <- function(model) {
X <- as.data.frame(summary(model)$coefficients)
X$Feature <- rownames(X)
# order by p-values
X <- X[order(X["Pr(>|t|)"]), ]
X[1:6, c("Feature", "Estimate", "Pr(>|t|)")]
}
knitr::opts_chunk$set(echo = TRUE, comment = NA)
top100_tags[1:5]
knitr::opts_chunk$set(echo = FALSE, comment = NA)
library(readr)
ted <- read_csv("~/Dropbox/IDC/Extra/ted_main.csv")
library(jsonlite)
ratings <- gsub("'", "\"", ted$ratings)
ratings_list <- lapply(ratings, fromJSON)
r <- c("Funny", "Confusing", "Inspiring")
rating_counts <- t(sapply(ratings_list, function(x) setNames(x$count[match(r, x$name)] , r)))
ted <- cbind(ted, rating_counts)
names(ted)
tags <- gsub("'|\\[|\\]| ", "", ted$tags)
tagstring <- paste(tags, collapse = ",")
tagstring <- strsplit(tagstring, ",")[[1]]
tag_freqs <- as.data.frame(table(tagstring))
tag_freqs <- tag_freqs[order(-tag_freqs$Freq),]
top100_tags <- trimws(as.character(tag_freqs$tags[1:100]))
top100_tags[1:10]
ted[top100_tags] <- F
tagslist <- lapply(tags, function(tgs) trimws(strsplit(tgs, ",")[[1]]))
for(i in 1:nrow(ted))
ted[i, top100_tags] <- top100_tags %in% tagslist[[i]]
explanatory <- c("comments", "duration", "film_date", "published_date", "languages", "num_speaker")
X <- ted[c(explanatory, top100_tags]
explanatory <- c("comments", "duration", "film_date", "published_date", "languages", "num_speaker")
X <- ted[c(explanatory, top100_tags)]
hist(ted$views)
hist(ted$views)
summary(ted$views)
?lm
knitr::opts_chunk$set(echo = FALSE, comment = NA)
library(readr)
ted <- read_csv("~/Dropbox/IDC/Extra/ted_main.csv")
library(jsonlite)
ratings <- gsub("'", "\"", ted$ratings)
ratings_list <- lapply(ratings, fromJSON)
r <- c("Funny", "Confusing", "Inspiring")
rating_counts <- t(sapply(ratings_list, function(x) setNames(x$count[match(r, x$name)] , r)))
ted <- cbind(ted, rating_counts)
names(ted)
tags <- gsub("'|\\[|\\]| ", "", ted$tags)
tagstring <- paste(tags, collapse = ",")
tagstring <- strsplit(tagstring, ",")[[1]]
tag_freqs <- as.data.frame(table(tagstring))
tag_freqs <- tag_freqs[order(-tag_freqs$Freq),]
top100_tags <- trimws(as.character(tag_freqs$tags[1:100]))
top100_tags[1:10]
ted[top100_tags] <- F
tagslist <- lapply(tags, function(tgs) trimws(strsplit(tgs, ",")[[1]]))
for(i in 1:nrow(ted))
ted[i, top100_tags] <- top100_tags %in% tagslist[[i]]
explanatory <- c("comments", "duration", "film_date", "published_date", "languages", "num_speaker")
X <- ted[c(explanatory, top100_tags)]
top_predictors_by_p <- function(model, n = 10) {
X <- as.data.frame(summary(model)$coefficients)
X$Feature <- rownames(X)
X <- X[order(X["Pr(>|t|)"]), ]
X[1:n, c("Feature", "Estimate", "Pr(>|t|)")]
}
lm_select <- function(y,X) {
model_all <- lm(y~., data = X)
X_ <- top_predictors_by_p(model_all)
lm(y~., data = X_)
}
views <- ted$views
lm_views <- lm_select(views, X)
model <- lm(views~., data = X)
str(model)
my:model <- lm(views~., data = X)
my_model <- lm(views~., data = X)
str(my_model)
my_model$model
str(my_model$model)
lm_select <- function(y,X) {
model_all <- lm(y~., data = X)
top_features <- top_predictors_by_p(model_all)
lm(y~., data = X[, top_features])
}
top_predictors_by_p <- function(model, n = 10) {
X <- as.data.frame(summary(model)$coefficients)
X$Feature <- rownames(X)
X <- X[order(X["Pr(>|t|)"]), ]
X[1:n, "Feature"]
}
views <- ted$views
lm_views <- lm_select(views, X)
X <- as.data.frame(summary(model)$coefficients)
X$Feature <- rownames(X)
X <- X[order(X["Pr(>|t|)"]), ]
X[1:n, "Feature"]
n = 10
X[1:n, "Feature"]
str(X[1:n, "Feature"])
str(X)
knitr::opts_chunk$set(echo = FALSE, comment = NA)
library(readr)
ted <- read_csv("~/Dropbox/IDC/Extra/ted_main.csv")
library(jsonlite)
ratings <- gsub("'", "\"", ted$ratings)
ratings_list <- lapply(ratings, fromJSON)
r <- c("Funny", "Confusing", "Inspiring")
rating_counts <- t(sapply(ratings_list, function(x) setNames(x$count[match(r, x$name)] , r)))
ted <- cbind(ted, rating_counts)
names(ted)
tags <- gsub("'|\\[|\\]| ", "", ted$tags)
tagstring <- paste(tags, collapse = ",")
tagstring <- strsplit(tagstring, ",")[[1]]
tag_freqs <- as.data.frame(table(tagstring))
tag_freqs <- tag_freqs[order(-tag_freqs$Freq),]
top100_tags <- trimws(as.character(tag_freqs$tags[1:100]))
top100_tags[1:10]
ted[top100_tags] <- F
tagslist <- lapply(tags, function(tgs) trimws(strsplit(tgs, ",")[[1]]))
for(i in 1:nrow(ted))
ted[i, top100_tags] <- top100_tags %in% tagslist[[i]]
explanatory <- c("comments", "duration", "film_date", "published_date", "languages", "num_speaker")
X <- ted[c(explanatory, top100_tags)]
knitr::opts_chunk$set(echo = FALSE, comment = NA)
library(readr)
ted <- read_csv("~/Dropbox/IDC/Extra/ted_main.csv")
library(jsonlite)
ratings <- gsub("'", "\"", ted$ratings)
ratings_list <- lapply(ratings, fromJSON)
r <- c("Funny", "Confusing", "Inspiring")
rating_counts <- t(sapply(ratings_list, function(x) setNames(x$count[match(r, x$name)] , r)))
ted <- cbind(ted, rating_counts)
names(ted)
tags <- gsub("'|\\[|\\]| ", "", ted$tags)
tagstring <- paste(tags, collapse = ",")
tagstring <- strsplit(tagstring, ",")[[1]]
tag_freqs <- as.data.frame(table(tagstring))
tag_freqs <- tag_freqs[order(-tag_freqs$Freq),]
top100_tags <- trimws(as.character(tag_freqs$tags[1:100]))
top100_tags[1:10]
ted[top100_tags] <- F
tagslist <- lapply(tags, function(tgs) trimws(strsplit(tgs, ",")[[1]]))
for(i in 1:nrow(ted))
ted[i, top100_tags] <- top100_tags %in% tagslist[[i]]
explanatory <- c("comments", "duration", "film_date", "published_date", "languages", "num_speaker")
X <- ted[c(explanatory, top100_tags)]
x <- as.data.frame(summary(model)$coefficients)
x$Feature <- rownames(x)
x <- x[order(x["Pr(>|t|)"]), ]
x[1:n, "Feature"]
features <- x[1:n, "Feature"]
features <- gsub("TRUE|FALSE", "",features)
features[grepl("(Intercept)", features)]
features[!grepl("(Intercept)", features)]
top_predictors_by_p <- function(model, n = 10) {
x <- as.data.frame(summary(model)$coefficients)
x$Feature <- rownames(x)
x <- x[order(x["Pr(>|t|)"]), ]
features <- x[1:n, "Feature"]
features <- gsub("TRUE|FALSE", "",features)
features[!grepl("(Intercept)", features)]
}
lm_select <- function(y,X) {
model_all <- lm(y~., data = X)
top_features <- top_predictors_by_p(model_all)
lm(y~., data = X[, top_features])
}
model_all <- lm(y~., data = X)
y <- views
model_all <- lm(y~., data = X)
top_features <- top_predictors_by_p(model_all)
top_features
lm(y~., data = X[, top_features])
views <- ted$views
lm_views <- lm_select(views, X)
summary(lm_views)
plot(lm_views)
plot(lm_views, 2)
summary(views)
funny <- ted$Funny
lm_funny <- lm_select(funny, X)
summary(lm_funny)
confusing <- ted$Confusing
lm_confusing <- lm_select(confusing, X)
summary(lm_confusing)
plot(lm_funny, 2)
plot(lm_confusing, 2)
inspiring <- ted$Inspiring
lm_inspiring <- lm_select(inspiring, X)
summary(lm_inspiring)
plot(lm_inspiring, 2)
top_predictors_by_p <- function(model, n = 10) {
x <- as.data.frame(summary(model)$coefficients)
x$Feature <- rownames(x)
x <- x[order(x["Pr(>|t|)"]), ]
features <- x[1:n, "Feature"]
features <- gsub("TRUE|FALSE", "",features)
features[!grepl("(Intercept)", features)]
}
lm_select <- function(y,X) {
model_all <- lm(y~., data = X)
top_features <- top_predictors_by_p(model_all)
lm(y~., data = X[, top_features])
}
summary(lm_funny)
summary(lm_confusing)
summary(lm_inspiring)
ted[which.max(ted$views), "tags"]
ted[which.max(ted$views), "views"]
ted[order(ted$views), "ttags"][1:5]
ted[order(ted$views), "tags"][1:5]
print("A simple summary of views")
summary(views)
500 /32
knitr::opts_chunk$set(echo = FALSE)
knitr::include_graphics("train_history.png")
knitr::include_graphics("training_history.png")
knitr::include_graphics("../models/training_history.png")
knitr::include_graphics("training_history.png")
knitr::include_graphics("model.png")
118*""
118*2
knitr::include_graphics("training_history.png")
knitr::include_graphics("prediction_example.png")
knitr::include_graphics("training_history.png")
knitr::include_graphics("prediction_example.png")
knitr::opts_chunk$set(echo = FALSE)
knitr::include_graphics("augmented_shrooms.png")
getwd()
setwd("~/")
setwd("~/GitHub/shiny/showcase-demo")
shiny::runApp()
runApp()
fixInNamespace(appMetadata, "shiny")
?fixInNamespace
?assignInMyNamespace
?setMethodS3
source("functions.R")
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
js <- system("~/GitHub/read_description.sh shiny", intern=TRUE)
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
js <- system("~/GitHub/read_shiny_info.sh shiny", intern=TRUE)
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
hs
js
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
app <- 1
desc <- x[[app]]$description
desc
x
x[[1]]
names(x)
x
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
js
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
x
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
js
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
x
app
desc <- x[[app]]$description
desc
x <- gsub("^\\{|\\}$", "", desc)
x <- gsub(";", "\n", x)
cat(x)
read.dcf(textConnection(x))
readShinyAppInfo <- function() {
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
for(app in seq_along(x)) {
desc <- x[[app]]$description
x[[app]]$description <- parseDescription(desc)
names(x)[app] <- x[[app]]$name
}
x
}
readShinyAppInfo()
readShinyAppInfo <- function() {
js <- system("~/GitHub/read_shiny_info.sh ~/GitHub/shiny", intern=TRUE)
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
for(app in seq_along(x)) {
desc <- x[[app]]$description
x[[app]]$description <- parseDescription(desc)
names(x)[app] <- x[[app]]$name
}
x
}
# use read.dcf
parseDescription <- function(desc) {
x <- gsub("^\\{|\\}$", "", desc)
x <- gsub(";", "\n", x)
x <- strsplit(x, split = ";")[[1]]
con <- textConnection(x)
x <- read.dcf(con)
close(con)
x
}
readShinyAppInfo()
readShinyAppInfo()
#' From R.utils
#' https://github.com/HenrikBengtsson/R.utils/blob/feeab63c4aa99a0b9a5e7e887c20585029d9514d/R/reassignInPackage.R
#'
#' @RdocDefault reassignInPackage
#'
#' @title "Re-assigns a new value to an existing object in a loaded package"
#'
#' \description{
#'  @get "title".
#' }
#'
#' @synopsis
#'
#' \arguments{
#'   \item{name}{The name of the object to be replaced."}
#'  \item{pkgName}{The name of the package where the object lives."}
#'   \item{value}{The new value to be assigned.}
#'   \item{keepOld}{If @TRUE, the old value is kept as attribute
#'     \code{oldValue} in the new object.}
#'   \item{...}{Not used.}
#' }
#'
#' \value{
#'   Returns (invisibly) the new object.
#' }
#'
#' @author
#'
#' \seealso{
#'   See \code{assignInNamespace()} in @see "utils::getFromNamespace".
#' }
#'
reassignInPackage <-  function(name, pkgName, value, keepOld=TRUE, ...) {
# Get the environment where to look for the function to replace
envName <- sprintf("package:%s", pkgName);
if (!envName %in% search())
throw("Package not loaded: ", pkgName);
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Patch
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get the object to be replaced
# Workaround for the fact that getAnywhere() is not accepting a string!
expr <- substitute(getAnywhere(name), list(name=name));
obj <- eval(expr);
pos <- which(obj$where == sprintf("namespace:%s", pkgName));
if (length(pos) == 0) {
throw("Argument 'name' does not refer to an existing object: ", name);
}
oldValue <- obj$objs[[pos]];
# Get environment of this object
env <- environment(oldValue);
# Assign this environment to the new object
environment(value) <- env;
# Keep the old value?
if (keepOld)
attr(value, "oldValue") <- oldValue;
unlockBindingT <- base::unlockBinding;
unlockBindingT(name, env);
assignInNamespaceT <- utils::assignInNamespace;
assignInNamespaceT(name, value, ns=pkgName, envir=env);
assign(name, value, envir=env);
lockBinding(name, env);
invisible(value);
}
#' THL replacemet for shiny:appMetadata
#'
#' This function is used to REPLACE the shiny AppMetadata function in the shiny NAMESPACE
#' using reassignInPackage
THLappMetadata <- function(desc) {
res <- ""
try(cols <- colnames(desc))
# this is the original part of appMetadata, taken from
# https://github.com/rstudio/shiny/blob/master/R/showcase.R
res <- tryCatch({
if ("Title" %in% cols)
res <- with(tags,
h4(class="text-muted shiny-showcase-apptitle", desc[1,"Title"],
if ("Author" %in% cols) small(
br(), "by",
if ("AuthorUrl" %in% cols)
a(href=desc[1,"AuthorUrl"], class="shiny-showcase-appauthor",
desc[1,"Author"])
else
desc[1,"Author"],
if ("AuthorEmail" %in% cols)
a(href=paste("mailto:", desc[1,"AuthorEmail"], sep = ''),
class="shiny-showcase-appauthoreemail",
desc[1,"AuthorEmail"])
else "")
else "")
)}, error = function(e) {
warning("The  original part of appMetadata func resulted in error. Cannot parse DESCRIPTION file.")
return(res)
})
# These are THL additions
res <- tryCatch({
if("Git" %in% cols) {
div(res, p(paste("Git:", desc[1, "Git"])))}},
error = {
warning("the thl addition to appMetadata resulted in error. Cannot parse DESCRIPTION file.")
return(res)})
res
}
#' Read Shiny app info
#'
#' Evoke a bash scfript to read shinyAPp meta in given location
#'
#' @examples
#' readShinyAppInfo()
readShinyAppInfo <- function(shinypath = "~/GitHub/shiny", script = "~/GitHub/read_shiny_info.sh") {
call <- paste(script, shinypath)
js <- system(call, intern=TRUE)
x <- jsonlite::fromJSON(js, simplifyDataFrame = FALSE)
for(app in seq_along(x)) {
desc <- x[[app]]$description
x[[app]]$description <- parseDescription(desc)
names(x)[app] <- x[[app]]$name
}
x
}
# use read.dcf
parseDescription <- function(desc) {
x <- gsub("^\\{|\\}$", "", desc)
x <- gsub(";", "\n", x)
x <- strsplit(x, split = ";")[[1]]
con <- textConnection(x)
x <- read.dcf(con)
close(con)
x
}
readShinyAppInfo()
apps <- readShinyAppInfo()
names(apps)
#' Read Shiny app info
#'
#' Evoke a bash scfript to read shinyAPp meta in given location
#'
#' @examples
#' apps <- readShinyAppInfo()
#' names(apps)
readShinyAppInfo <- function(shinypath = "~/GitHub/shiny", script = "~/GitHub/read_shiny_info.sh") {
call <- paste(script, shinypath)
json <- system(call, intern=TRUE)
x <- jsonlite::fromJSON(json, simplifyDataFrame = FALSE)
for(app in seq_along(x)) {
desc <- x[[app]]$description
x[[app]]$description <- parseDescription(desc)
names(x)[app] <- x[[app]]$name
}
structure(x, class = "shiny-app-index")
}
apps <- readShinyAppInfo()
names(apps)
str(apps)
class(apps)
shinypath = "~/GitHub/shiny"
script = "~/GitHub/read_shiny_info.sh"
call <- paste(script, shinypath)
json <- system(call, intern=TRUE)
x <- jsonlite::fromJSON(json, simplifyDataFrame = FALSE)
x
read.dcf(textConnection(x[[1]]$description))
json <- system(call, intern=TRUE)
x <- jsonlite::fromJSON(json, simplifyDataFrame = FALSE)
x
call <- paste(script, shinypath)
json <- system(call, intern=TRUE)
x <- jsonlite::fromJSON(json, simplifyDataFrame = FALSE)
x
json <- system(call, intern=TRUE)
x <- jsonlite::fromJSON(json, simplifyDataFrame = FALSE)
x
